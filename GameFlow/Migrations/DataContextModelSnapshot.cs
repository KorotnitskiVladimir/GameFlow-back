// <auto-generated />
using System;
using GameFlow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameFlow.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("GameFlow")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameFlow.Data.AccessToken", b =>
                {
                    b.Property<Guid>("Jti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Aud")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Exp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Iat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Nbf")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Sub")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Jti");

                    b.ToTable("AccessTokens", "GameFlow");
                });

            modelBuilder.Entity("GameFlow.Data.UserAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccesses", "GameFlow");
                });

            modelBuilder.Entity("GameFlow.Data.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersData", "GameFlow");
                });

            modelBuilder.Entity("GameFlow.Data.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CanCreate")
                        .HasColumnType("int");

                    b.Property<int>("CanDelete")
                        .HasColumnType("int");

                    b.Property<int>("CanRead")
                        .HasColumnType("int");

                    b.Property<int>("CanUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "GameFlow");

                    b.HasData(
                        new
                        {
                            Id = "guest",
                            CanCreate = 0,
                            CanDelete = 0,
                            CanRead = 0,
                            CanUpdate = 0,
                            Description = "solely registered user"
                        },
                        new
                        {
                            Id = "editor",
                            CanCreate = 0,
                            CanDelete = 0,
                            CanRead = 1,
                            CanUpdate = 1,
                            Description = "has authority to edit content"
                        },
                        new
                        {
                            Id = "admin",
                            CanCreate = 1,
                            CanDelete = 1,
                            CanRead = 1,
                            CanUpdate = 1,
                            Description = "full access to DB"
                        },
                        new
                        {
                            Id = "moderator",
                            CanCreate = 0,
                            CanDelete = 1,
                            CanRead = 1,
                            CanUpdate = 0,
                            Description = "has authority to block"
                        });
                });

            modelBuilder.Entity("GameFlow.Data.UserAccess", b =>
                {
                    b.HasOne("GameFlow.Data.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameFlow.Data.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
